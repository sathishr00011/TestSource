<?xml version="1.0" encoding="utf-8"?>
<this:Process this:BuildSettings="[New Microsoft.TeamFoundation.Build.Workflow.Activities.BuildSettings()]" this:TestSpecs="[New Microsoft.TeamFoundation.Build.Workflow.Activities.TestSpecList(New Microsoft.TeamFoundation.Build.Workflow.Activities.TestAssemblySpec(&quot;**\*test*.dll&quot;))]" this:BuildNumberFormat="[&quot;$(BuildDefinitionName)_$(Date:yyyyMMdd)$(Rev:.r)&quot;]" this:CleanWorkspace="[Microsoft.TeamFoundation.Build.Workflow.Activities.CleanWorkspaceOption.All]" this:RunCodeAnalysis="[Microsoft.TeamFoundation.Build.Workflow.Activities.CodeAnalysisOption.AsConfigured]" this:SourceAndSymbolServerSettings="[New Microsoft.TeamFoundation.Build.Workflow.Activities.SourceAndSymbolServerSettings(True, Nothing)]" this:AgentSettings="[New Microsoft.TeamFoundation.Build.Workflow.Activities.AgentSettings(New System.TimeSpan(4, 0, 0), New System.TimeSpan(0, 0, 0))]" this:AssociateChangesetsAndWorkItems="[True]" this:CreateWorkItem="[True]" this:DropBuild="[True]" this:MSBuildPlatform="[Microsoft.TeamFoundation.Build.Workflow.Activities.ToolPlatform.Auto]" this:PerformTestImpactAnalysis="[True]" this:CreateLabel="[True]" this:DisableTests="[False]" this:Verbosity="[Microsoft.TeamFoundation.Build.Workflow.BuildVerbosity.Normal]" this:SupportedReasons="All" this:ExcludeIntegrationTests="True" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mt="clr-namespace:Microsoft.TeamFoundation;assembly=Microsoft.TeamFoundation.Common" xmlns:mtbc="clr-namespace:Microsoft.TeamFoundation.Build.Client;assembly=Microsoft.TeamFoundation.Build.Client" xmlns:mtbc1="clr-namespace:Microsoft.TeamFoundation.Build.Client;assembly=Microsoft.TeamFoundation.Build.Client, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" xmlns:mtbw="clr-namespace:Microsoft.TeamFoundation.Build.Workflow;assembly=Microsoft.TeamFoundation.Build.Workflow" xmlns:mtbw1="clr-namespace:Microsoft.TeamFoundation.Build.Workflow;assembly=Microsoft.TeamFoundation.Build.Workflow, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" xmlns:mtbwa="clr-namespace:Microsoft.TeamFoundation.Build.Workflow.Activities;assembly=Microsoft.TeamFoundation.Build.Workflow" xmlns:mtbwa1="clr-namespace:Microsoft.TeamFoundation.Build.Workflow.Activities;assembly=Microsoft.TeamFoundation.Build.Workflow, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" xmlns:mtbwt="clr-namespace:Microsoft.TeamFoundation.Build.Workflow.Tracking;assembly=Microsoft.TeamFoundation.Build.Workflow" xmlns:mttbb="clr-namespace:Microsoft.TeamFoundation.TestImpact.BuildIntegration.BuildActivities;assembly=Microsoft.TeamFoundation.TestImpact.BuildIntegration" xmlns:mtvc="clr-namespace:Microsoft.TeamFoundation.VersionControl.Client;assembly=Microsoft.TeamFoundation.VersionControl.Client, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" xmlns:mtvc1="clr-namespace:Microsoft.TeamFoundation.VersionControl.Client;assembly=Microsoft.TeamFoundation.VersionControl.Client" xmlns:mtvc2="clr-namespace:Microsoft.TeamFoundation.VersionControl.Common;assembly=Microsoft.TeamFoundation.VersionControl.Common" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:mvc="clr-namespace:Microsoft.VisualBasic.CompilerServices;assembly=Microsoft.VisualBasic" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:s1="clr-namespace:System;assembly=System.Core" xmlns:s2="clr-namespace:System;assembly=System" xmlns:s3="clr-namespace:System;assembly=System.ServiceModel" xmlns:s4="clr-namespace:System;assembly=System.ComponentModel.Composition" xmlns:s5="clr-namespace:System;assembly=Microsoft.VisualStudio.Platform.VSEditor" xmlns:s6="clr-namespace:System;assembly=System.Numerics" xmlns:sa="clr-namespace:System.Activities;assembly=System.Activities" xmlns:sad="clr-namespace:System.Activities.Debugger;assembly=System.Activities" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:scg1="clr-namespace:System.Collections.Generic;assembly=System.Core" xmlns:scg2="clr-namespace:System.Collections.Generic;assembly=System" xmlns:scg3="clr-namespace:System.Collections.Generic;assembly=System.ServiceModel" xmlns:si="clr-namespace:System.IO;assembly=System" xmlns:si1="clr-namespace:System.IO;assembly=mscorlib" xmlns:si2="clr-namespace:System.IO;assembly=System.Core" xmlns:si3="clr-namespace:System.IO;assembly=WindowsBase" xmlns:si4="clr-namespace:System.IO;assembly=System.ServiceModel" xmlns:sl="clr-namespace:System.Linq;assembly=System.Core" xmlns:sx="clr-namespace:System.Xml;assembly=System.Xml" xmlns:sx1="clr-namespace:System.Xml;assembly=System.Data" xmlns:sx2="clr-namespace:System.Xml;assembly=System.Runtime.Serialization" xmlns:sxx="clr-namespace:System.Xml.XPath;assembly=System.Xml" xmlns:sxx1="clr-namespace:System.Xml.XPath;assembly=System.Xml.Linq" xmlns:this="clr-namespace:TfsBuild;assembly=DeclarativeServiceLibrary1" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <this:Process.MSBuildArguments>
    <InArgument x:TypeArguments="x:String" />
  </this:Process.MSBuildArguments>
  <this:Process.GetVersion>
    <InArgument x:TypeArguments="x:String" />
  </this:Process.GetVersion>
  <this:Process.Metadata>
    <mtbw:ProcessParameterMetadataCollection>
      <mtbw:ProcessParameterMetadata BrowsableWhen="Always" Category="Automated Testing" Description="Set to &quot;False&quot; to enable Integration tests to run during the test run." DisplayName="Exclude Integration Tests" ParameterName="ExcludeIntegrationTests" /> <mtbw:ProcessParameterMetadata BrowsableWhen="Always" Category="Manifest Automation" Description="Use to specify the packages that should be found for the release manifest (e.g. *.msi)" DisplayName="Manifest Filter Expression" ParameterName="ManifestFilterExpression" /> <mtbw:ProcessParameterMetadata BrowsableWhen="Always" Category="Manifest Automation" Description="E.g. MyApp.Library" DisplayName="Manifest Package Identifier" ParameterName="ManifestPackageIdentifier" /> <mtbw:ProcessParameterMetadata BrowsableWhen="Always" Category="Manifest Automation" Description="Specifies the root path to where all Partial Manifests should be generated (e.g. \\myshare\BuildOutput\ManifestAutomation)" DisplayName="Generated Manifest Output Path" ParameterName="GeneratedManifestOutputPath" /> <mtbw:ProcessParameterMetadata BrowsableWhen="Always" Category="Manifest Automation" Description="Use this tag to group together build packages that share the same route to Live (e.g. R2.1, R3.0)" DisplayName="Route to Live Tag" ParameterName="RouteToLiveTag" /> <mtbw:ProcessParameterMetadata BrowsableWhen="Always" Category="Misc" DisplayName="Branch to Build" ParameterName="BranchToBuild" /> <mtbw:ProcessParameterMetadata BrowsableWhen="Always" Category="Misc" DisplayName="FileRefCheckinTargetFileName" ParameterName="FileRefCheckinTargetFileName" /></mtbw:ProcessParameterMetadataCollection>
  </this:Process.Metadata>
  <mva:VisualBasic.Settings>Assembly references and imported namespaces serialized as XML namespaces</mva:VisualBasic.Settings>
  <this:Process.Implementation>
    <Sequence DisplayName="Overall Build Process" sad:XamlDebuggerXmlReader.FileName="C:\SP_TFS\TescoAppStore\Main\BuildProcessTemplates\PostBuildCheckinProcessTemplate_Manifest.xaml" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces">
      <Sequence.Variables>
        <Variable x:TypeArguments="mtbc:IBuildDetail" Name="BuildDetail" />
        <Variable x:TypeArguments="scg:IEnumerable(x:String)" Name="FilesForManifest" />
        <Variable x:TypeArguments="x:Boolean" Default="True" Name="ShouldPartialManifestBeGenerated" />
      </Sequence.Variables>
      <mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[String.Format(&quot;*** This build will be deployed to {0} ***&quot;, DeployToEnvironment)]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" />
      <mtbwa:GetBuildDetail DisplayName="Get the Build" Result="[BuildDetail]" />
      <Sequence DisplayName="Update Drop Location">
        <mtbwa:InvokeForReason DisplayName="Update Build Number for Triggered Builds">
          <mtbwa:UpdateBuildNumber BuildNumberFormat="[BuildNumberFormat]" DisplayName="Update Build Number" />
        </mtbwa:InvokeForReason>
        <mtbwa:SetBuildProperties DisplayName="Set Drop Location" DropLocation="[BuildDetail.DropLocationRoot + &quot;\&quot; + BuildDetail.BuildDefinition.Name + &quot;\&quot; + BuildDetail.BuildNumber]" PropertiesToSet="DropLocation" />
        <mtbwa:CreateDirectory Directory="[BuildDetail.DropLocation]" DisplayName="Create the Drop Location" />
      </Sequence>
      <mtbwa:AgentScope DisplayName="Run On Agent" MaxExecutionTime="[AgentSettings.MaxExecutionTime]" MaxWaitTime="[AgentSettings.MaxWaitTime]" ReservationSpec="[AgentSettings.GetAgentReservationSpec()]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces">
        <mtbwa:AgentScope.Variables>
          <Variable x:TypeArguments="mtbc:IBuildAgent" Name="BuildAgent" /> <Variable x:TypeArguments="mtvc1:Workspace" Name="Workspace" /> <Variable x:TypeArguments="x:String" Name="BuildDirectory" /> <Variable x:TypeArguments="x:String" Default="[BuildDetail.BuildNumber]" Name="LabelName" /> <Variable x:TypeArguments="x:String" Name="WorkspaceName" /> <Variable x:TypeArguments="x:String" Name="SourcesDirectory" /> <Variable x:TypeArguments="x:String" Name="BinariesDirectory" /> <Variable x:TypeArguments="x:String" Name="TestResultsDirectory" /></mtbwa:AgentScope.Variables>
        <Sequence DisplayName="Initialize Variables">
          <mtbwa:GetBuildAgent DisplayName="Get the Agent" Result="[BuildAgent]" />
          <mtbwa:GetBuildDirectory DisplayName="Get the Build Directory" Result="[BuildDirectory]" />
          <Assign x:TypeArguments="x:String" DisplayName="Initialize Workspace Name" To="[WorkspaceName]" Value="[String.Format(&quot;{0}_{1}_{2}&quot;, BuildDetail.BuildDefinition.Id, Microsoft.TeamFoundation.LinkingUtilities.DecodeUri(BuildAgent.Uri.AbsoluteUri).ToolSpecificId, BuildAgent.ServiceHost.Name)]" />
          <Assign x:TypeArguments="x:String" DisplayName="Initialize Sources Directory" To="[SourcesDirectory]" Value="[String.Format(&quot;{0}\Sources&quot;, BuildDirectory)]" />
          <Assign x:TypeArguments="x:String" DisplayName="Initialize Binaries Directory" To="[BinariesDirectory]" Value="[String.Format(&quot;{0}\Binaries&quot;, BuildDirectory)]" />
          <Assign x:TypeArguments="x:String" DisplayName="Initialize TestResults Directory" To="[TestResultsDirectory]" Value="[String.Format(&quot;{0}\TestResults&quot;, BuildDirectory)]" />
          <If Condition="[Not BuildSettings.HasPlatformConfigurations]" DisplayName="If Not BuildSettings.HasPlatformConfigurations">
            <If.Then>
              <Assign x:TypeArguments="mtbwa:PlatformConfigurationList" DisplayName="Use Default Platform Configuration" To="[BuildSettings.PlatformConfigurations]" Value="[Microsoft.TeamFoundation.Build.Workflow.Activities.PlatformConfigurationList.Default]" />
            </If.Then>
          </If>
        </Sequence> <Sequence DisplayName="Initialize Workspace"><mtbwa:DeleteDirectory Directory="[TestResultsDirectory]" DisplayName="Delete Test Results Directory" Recursive="[True]" /><If Condition="[Not CleanWorkspace = Microsoft.TeamFoundation.Build.Workflow.Activities.CleanWorkspaceOption.None]" DisplayName="If Not CleanWorkspace = CleanWorkspaceOption.None"><If.Then><mtbwa:DeleteDirectory Directory="[BinariesDirectory]" DisplayName="Delete Binaries Directory" /></If.Then></If><If Condition="[CleanWorkspace = Microsoft.TeamFoundation.Build.Workflow.Activities.CleanWorkspaceOption.All]" DisplayName="If CleanWorkspace = CleanWorkspaceOption.All"><If.Then><Sequence DisplayName="Delete Workspace and Sources Directory"><mtbwa:DeleteWorkspace DeleteLocalItems="[True]" DisplayName="Delete Workspace" Name="[WorkspaceName]" /><mtbwa:DeleteDirectory Directory="[SourcesDirectory]" DisplayName="Delete Sources Directory" /></Sequence></If.Then></If><mtbwa:CreateWorkspace BuildDirectory="[BuildDirectory]" Comment="[&quot;Workspace Created by Team Build&quot;]" DisplayName="Create Workspace" Name="[WorkspaceName]" Result="[Workspace]" SourcesDirectory="[SourcesDirectory]" /><If Condition="[CleanWorkspace = Microsoft.TeamFoundation.Build.Workflow.Activities.CleanWorkspaceOption.Outputs]" DisplayName="If CleanWorkspace = CleanWorkspaceOption.Outputs"><If.Then><ForEach x:TypeArguments="mtbwa:PlatformConfiguration" DisplayName="For Each Configuration in BuildSettings.PlatformConfigurations" Values="[BuildSettings.PlatformConfigurations]"><ActivityAction x:TypeArguments="mtbwa:PlatformConfiguration"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="mtbwa:PlatformConfiguration" Name="platformConfiguration" /></ActivityAction.Argument><Sequence DisplayName="Clean Configuration"><If Condition="[BuildSettings.HasProjectsToBuild]" DisplayName="If BuildSettings.HasProjectsToBuild"><If.Then><ForEach x:TypeArguments="x:String" DisplayName="For Each Project in BuildSettings.ProjectsToBuild" Values="[BuildSettings.ProjectsToBuild]"><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="serverBuildProjectItem" /></ActivityAction.Argument><Sequence DisplayName="Clean Project"><Sequence.Variables><Variable x:TypeArguments="x:String" Name="localBuildProjectItem" /></Sequence.Variables><mtbwa:ConvertWorkspaceItem DisplayName="Convert Server Paths to Local Paths" Input="[serverBuildProjectItem]" Result="[localBuildProjectItem]" Workspace="[Workspace]" /><If Condition="[System.IO.File.Exists(localBuildProjectItem)]" DisplayName="If File.Exists(Project)"><If.Then><mtbwa:MSBuild CommandLineArguments="[String.Format(&quot;/p:SkipInvalidConfigurations=true {0} /p:Env={1}&quot;, MSBuildArguments, DeployToEnvironment)]" Configuration="[platformConfiguration.Configuration]" DisplayName="Run MSBuild for Project" GenerateVSPropsFile="[True]" OutDir="[BinariesDirectory]" Platform="[platformConfiguration.Platform]" Project="[localBuildProjectItem]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" Targets="[New String() { &quot;Clean&quot; }]" TargetsNotLogged="[New String() {&quot;GetNativeManifest&quot;, &quot;GetCopyToOutputDirectoryItems&quot;, &quot;GetTargetPath&quot;}]" ToolPlatform="[MSBuildPlatform]" Verbosity="[Verbosity]" /></If.Then></If></Sequence></ActivityAction></ForEach></If.Then></If></Sequence></ActivityAction></ForEach></If.Then></If><mtbwa:SyncWorkspace DisplayName="Get Workspace" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" VersionOverride="[GetVersion]" Workspace="[Workspace]" /></Sequence> <If Condition="[CreateLabel]" DisplayName="If CreateLabel"><If.Then><mtbwa:InvokeForReason DisplayName="Create and Set Label for non-Shelveset Builds" Reason="Manual, IndividualCI, BatchedCI, Schedule, ScheduleForced, UserCreated"><mtbwa:LabelSources Child="[Microsoft.TeamFoundation.VersionControl.Client.LabelChildOption.Replace]" Comment="[&quot;Label Created by Team Build&quot;]" DisplayName="Create Label" Items="[New String() {&quot;$/&quot;}]" Name="[LabelName]" Recursion="[Microsoft.TeamFoundation.VersionControl.Client.RecursionType.Full]" Scope="[String.Format(&quot;$/{0}&quot;, BuildDetail.BuildDefinition.TeamProject)]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" Version="[String.Format(&quot;W{0}&quot;, Workspace.Name)]" /> <mtbwa:SetBuildProperties DisplayName="Set Label on BuildDetail" LabelName="[String.Format(&quot;{0}@$/{1}&quot;, LabelName, BuildDetail.BuildDefinition.TeamProject)]" PropertiesToSet="LabelName" /></mtbwa:InvokeForReason></If.Then></If> <TryCatch DisplayName="Try Compile, Test, and Associate Changesets and Work Items"><TryCatch.Finally><Sequence DisplayName="Revert Workspace and Copy Files to Drop Location"><mtbwa:InvokeForReason DisplayName="Revert Workspace for CheckinShelveset Builds" Reason="CheckInShelveset"><mtbwa:RevertWorkspace DisplayName="Revert Workspace" Workspace="[Workspace]" /></mtbwa:InvokeForReason><If Condition="[DropBuild]" DisplayName="If DropBuild"><If.Then><mtbwa:InvokeForReason DisplayName="Copy Files to Drop Location for Triggered Builds" Reason="Triggered"><mtbwa:CopyDirectory Destination="[BuildDetail.DropLocation]" DisplayName="Copy Files to Drop Location" Source="[BinariesDirectory]" /></mtbwa:InvokeForReason></If.Then></If></Sequence></TryCatch.Finally><TryCatch.Try><Sequence><Sequence.Variables><Variable x:TypeArguments="s:Exception" Name="compilationException" /><Variable x:TypeArguments="x:Boolean" Name="treatTestFailureAsBuildFailure" /></Sequence.Variables><Parallel DisplayName="Compile, Test, and Associate Changesets and Work Items"><TryCatch DisplayName="Try Compile and Test"><TryCatch.Try><Sequence DisplayName="Compile and Test"><ForEach x:TypeArguments="mtbwa:PlatformConfiguration" DisplayName="For Each Configuration in BuildSettings.PlatformConfigurations" Values="[BuildSettings.PlatformConfigurations]"><ActivityAction x:TypeArguments="mtbwa:PlatformConfiguration"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="mtbwa:PlatformConfiguration" Name="platformConfiguration" /></ActivityAction.Argument><Sequence DisplayName="Compile and Test for Configuration"><Sequence.Variables><Variable x:TypeArguments="x:String" Name="outputDirectory" /><Variable x:TypeArguments="x:String" Name="logFileDropLocation" /></Sequence.Variables><Sequence DisplayName="Initialize Variables"><Assign x:TypeArguments="x:String" DisplayName="Initialize OutputDirectory" To="[outputDirectory]" Value="[If (platformConfiguration.IsEmpty Or BuildSettings.PlatformConfigurations.Count = 1, BinariesDirectory, If (platformConfiguration.IsPlatformEmptyOrAnyCpu, BinariesDirectory + &quot;\&quot; + platformConfiguration.Configuration, BinariesDirectory + &quot;\&quot; + platformConfiguration.Platform + &quot;\&quot; + platformConfiguration.Configuration))]" /><Assign x:TypeArguments="x:String" DisplayName="Initialize LogFile Drop Location" To="[logFileDropLocation]" Value="[If (platformConfiguration.IsEmpty Or BuildSettings.PlatformConfigurations.Count = 1, BuildDetail.DropLocation + &quot;\logs&quot;, If (platformConfiguration.IsPlatformEmptyOrAnyCpu, BuildDetail.DropLocation + &quot;\logs\&quot; + platformConfiguration.Configuration, BuildDetail.DropLocation + &quot;\logs\&quot; + platformConfiguration.Platform + &quot;\&quot; + platformConfiguration.Configuration))]" /></Sequence><If Condition="[BuildSettings.HasProjectsToBuild]" DisplayName="If BuildSettings.HasProjectsToBuild"><If.Then><ForEach x:TypeArguments="x:String" DisplayName="For Each Project in BuildSettings.ProjectsToBuild" Values="[BuildSettings.ProjectsToBuild]"><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="serverBuildProjectItem" /></ActivityAction.Argument><TryCatch DisplayName="Try to Compile the Project"><TryCatch.Try><Sequence DisplayName="Compile the Project"><Sequence.Variables><Variable x:TypeArguments="x:String" Name="localProject" /></Sequence.Variables><mtbwa:ConvertWorkspaceItem DisplayName="Convert Server Path to Local Path" Input="[serverBuildProjectItem]" Result="[localProject]" Workspace="[Workspace]" /><mtbwa:MSBuild CommandLineArguments="[String.Format(&quot;/p:SkipInvalidConfigurations=true {0} /p:Env={1}&quot;, MSBuildArguments, DeployToEnvironment)]" Configuration="[platformConfiguration.Configuration]" DisplayName="Run MSBuild for Project" GenerateVSPropsFile="[True]" LogFileDropLocation="[logFileDropLocation]" OutDir="[outputDirectory]" Platform="[platformConfiguration.Platform]" Project="[localProject]" RunCodeAnalysis="[RunCodeAnalysis]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" TargetsNotLogged="[New String() {&quot;GetNativeManifest&quot;, &quot;GetCopyToOutputDirectoryItems&quot;, &quot;GetTargetPath&quot;}]" ToolPlatform="[MSBuildPlatform]" Verbosity="[Verbosity]" /></Sequence></TryCatch.Try><TryCatch.Catches><Catch x:TypeArguments="s:Exception"><ActivityAction x:TypeArguments="s:Exception"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="s:Exception" Name="ex" /></ActivityAction.Argument><Sequence DisplayName="Handle Exception"><mtbwa:SetBuildProperties CompilationStatus="[Microsoft.TeamFoundation.Build.Client.BuildPhaseStatus.Failed]" DisplayName="Set CompilationStatus to Failed" PropertiesToSet="CompilationStatus" /><If Condition="[CreateWorkItem]" DisplayName="If CreateWorkItem"><If.Then><mtbwa:InvokeForReason DisplayName="Create Work Item for non-Shelveset Builds" Reason="Manual, IndividualCI, BatchedCI, Schedule, ScheduleForced, UserCreated"><mtbwa:OpenWorkItem AssignedTo="[BuildDetail.RequestedFor]" Comment="[&quot;This work item was created by TFS Build on a build failure.&quot;]" CustomFields="[New Dictionary(Of String, String) From {{&quot;System.Reason&quot;, &quot;Build Failure&quot;}, {&quot;Reason&quot;, &quot;Build Failure&quot;}, {&quot;Scrum.v3.BugOrigin&quot;, &quot;Build&quot;}, {&quot;Microsoft.VSTS.TCM.ReproSteps&quot;, &quot;Start the build using TFS Build&quot;}}]" DisplayName="Create Work Item" Title="[String.Format(&quot;Build Failure in Build: {0}&quot;, BuildDetail.BuildNumber)]" Type="[&quot;Bug&quot;]" /></mtbwa:InvokeForReason></If.Then></If><Rethrow DisplayName="Rethrow the exception so the build will stop" /></Sequence></ActivityAction></Catch></TryCatch.Catches></TryCatch></ActivityAction></ForEach></If.Then></If><If Condition="[Not DisableTests]" DisplayName="If Not DisableTests"><If.Then><Sequence DisplayName="Run Tests"><If Condition="[Not TestSpecs Is Nothing]" DisplayName="If Not TestSpecs Is Nothing"><If.Then><ForEach x:TypeArguments="mtbwa:TestSpec" DisplayName="For Each TestSpec in TestSpecs" Values="[TestSpecs]"><ActivityAction x:TypeArguments="mtbwa:TestSpec"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="mtbwa:TestSpec" Name="spec" /></ActivityAction.Argument><TryCatch DisplayName="Try Run Tests"><TryCatch.Try><If Condition="[TypeOf spec Is Microsoft.TeamFoundation.Build.Workflow.Activities.TestMetadataFileSpec]" DisplayName="If spec Is TestMetadataFileSpec"><If.Then><Sequence DisplayName="Run MSTest for Metadata File"><Sequence.Variables><Variable x:TypeArguments="mtbwa:TestMetadataFileSpec" Name="testMetadataFile" /><Variable x:TypeArguments="x:String" Name="localTestMetadata" /></Sequence.Variables><Assign x:TypeArguments="mtbwa:TestMetadataFileSpec" DisplayName="Assign spec to testMetadataFile" To="[testMetadataFile]" Value="[DirectCast(spec, Microsoft.TeamFoundation.Build.Workflow.Activities.TestMetadataFileSpec)]" /><mtbwa:ConvertWorkspaceItem DisplayName="Convert Server Path to Local Path" Input="[testMetadataFile.MetadataFileName]" Result="[localTestMetadata]" Workspace="[Workspace]" /><mtbwa:MSTest Category="[If(ExcludeIntegrationTests, &quot;!Integration&quot; + testMetadataFile.CategoryFilter, testMetadataFile.CategoryFilter)]" CommandLineArguments="[testMetadataFile.MSTestCommandLineArgs]" DisplayName="Run MSTest for Metadata File" Flavor="[platformConfiguration.Configuration]" MaxPriority="[testMetadataFile.MaximumPriority]" MinPriority="[testMetadataFile.MinimumPriority]" PathToResultsFilesRoot="[TestResultsDirectory]" Platform="[platformConfiguration.Platform]" SearchPathRoot="[outputDirectory]" TestLists="[testMetadataFile.TestLists]" TestMetadata="[localTestMetadata]" TestSettings="[String.Empty]" /></Sequence></If.Then><If.Else><Sequence DisplayName="Run MSTest for Test Assemblies"><Sequence.Variables><Variable x:TypeArguments="mtbwa:TestAssemblySpec" Name="testAssembly" /><Variable x:TypeArguments="scg:IEnumerable(x:String)" Name="testAssemblies" /><Variable x:TypeArguments="x:String" Default="[String.Empty]" Name="testFlavor" /><Variable x:TypeArguments="x:String" Default="[String.Empty]" Name="testPlatform" /></Sequence.Variables><Assign x:TypeArguments="mtbwa:TestAssemblySpec" DisplayName="Assign spec to testAssembly" To="[testAssembly]" Value="[DirectCast(spec, Microsoft.TeamFoundation.Build.Workflow.Activities.TestAssemblySpec)]" /><mtbwa:FindMatchingFiles DisplayName="Find Test Assemblies" MatchPattern="[String.Format(&quot;{0}\{1}&quot;, outputDirectory, testAssembly.AssemblyFileSpec)]" Result="[testAssemblies]" /><If Condition="[testAssemblies.Count() &gt; 0]" DisplayName="If Test Assemblies Found"><If.Then><If Condition="[testAssembly.HasTestSettingsFile]" DisplayName="If testAssembly.HasTestSettingsFile"><If.Then><Sequence DisplayName="Find Test Settings File And Run MSTest"><Sequence.Variables><Variable x:TypeArguments="x:String" Name="localTestSettings" /></Sequence.Variables><mtbwa:ConvertWorkspaceItem DisplayName="Convert Server Path to Local Path" Input="[testAssembly.TestSettingsFileName]" Result="[localTestSettings]" Workspace="[Workspace]" /><mtbwa:MSTest Category="[If(ExcludeIntegrationTests, &quot;!Integration&quot; + testAssembly.CategoryFilter, testAssembly.CategoryFilter)]" CommandLineArguments="[testAssembly.MSTestCommandLineArgs]" DisplayName="Run MSTest for TestAssemblies" Flavor="[platformConfiguration.Configuration]" MaxPriority="[testAssembly.MaximumPriority]" MinPriority="[testAssembly.MinimumPriority]" PathToResultsFilesRoot="[TestResultsDirectory]" Platform="[platformConfiguration.Platform]" SearchPathRoot="[outputDirectory]" TestContainers="[testAssemblies]" TestSettings="[localTestSettings]" /></Sequence></If.Then><If.Else><mtbwa:MSTest Category="[If(ExcludeIntegrationTests, &quot;!Integration&quot; + testAssembly.CategoryFilter, testAssembly.CategoryFilter)]" CommandLineArguments="[testAssembly.MSTestCommandLineArgs]" DisplayName="Run MSTest for TestAssemblies" Flavor="[platformConfiguration.Configuration]" MaxPriority="[testAssembly.MaximumPriority]" MinPriority="[testAssembly.MinimumPriority]" PathToResultsFilesRoot="[TestResultsDirectory]" Platform="[platformConfiguration.Platform]" SearchPathRoot="[outputDirectory]" TestContainers="[testAssemblies]" /></If.Else></If></If.Then></If></Sequence></If.Else></If></TryCatch.Try><TryCatch.Catches><Catch x:TypeArguments="s:Exception"><ActivityAction x:TypeArguments="s:Exception"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="s:Exception" Name="testException" /></ActivityAction.Argument><Sequence DisplayName="Handle MSTest Exception"><mtbwa:WriteBuildError Message="[testException.Message]" /><mtbwa:SetBuildProperties DisplayName="Set TestStatus to Failed" PropertiesToSet="TestStatus" TestStatus="[Microsoft.TeamFoundation.Build.Client.BuildPhaseStatus.Failed]" /><If Condition="[spec.FailBuildOnFailure]" DisplayName="If spec.FailBuildOnFailure"><If.Then><Assign x:TypeArguments="x:Boolean" DisplayName="Set treatTestFailureAsBuildFailure to True" To="[treatTestFailureAsBuildFailure]" Value="[True]" /></If.Then></If></Sequence></ActivityAction></Catch></TryCatch.Catches></TryCatch></ActivityAction></ForEach></If.Then></If></Sequence></If.Then></If></Sequence></ActivityAction></ForEach><If Condition="[BuildDetail.CompilationStatus = Microsoft.TeamFoundation.Build.Client.BuildPhaseStatus.Unknown]" DisplayName="If CompilationStatus = Unknown"><If.Then><mtbwa:SetBuildProperties CompilationStatus="[Microsoft.TeamFoundation.Build.Client.BuildPhaseStatus.Succeeded]" DisplayName="Set CompilationStatus to Succeeded" PropertiesToSet="CompilationStatus" /></If.Then></If><If Condition="[BuildDetail.TestStatus = Microsoft.TeamFoundation.Build.Client.BuildPhaseStatus.Unknown]" DisplayName="If TestStatus = Unknown"><If.Then><mtbwa:SetBuildProperties DisplayName="Set TestStatus to Succeeded" PropertiesToSet="TestStatus" TestStatus="[Microsoft.TeamFoundation.Build.Client.BuildPhaseStatus.Succeeded]" /></If.Then></If><If Condition="[treatTestFailureAsBuildFailure And (BuildDetail.TestStatus = Microsoft.TeamFoundation.Build.Client.BuildPhaseStatus.Failed)]" DisplayName="If TreatTestFailureAsBuildFailure And (TestStatus = Failed)"><If.Then><mtbwa:SetBuildProperties DisplayName="Set Status to Failed" PropertiesToSet="Status" Status="[Microsoft.TeamFoundation.Build.Client.BuildStatus.Failed]" /></If.Then></If></Sequence></TryCatch.Try><TryCatch.Catches><Catch x:TypeArguments="s:Exception"><ActivityAction x:TypeArguments="s:Exception"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="s:Exception" Name="compilationExceptionArgument" /></ActivityAction.Argument><Assign x:TypeArguments="s:Exception" DisplayName="Save the Compilation Exception" To="[compilationException]" Value="[compilationExceptionArgument]" /></ActivityAction></Catch></TryCatch.Catches></TryCatch><If Condition="[AssociateChangesetsAndWorkItems]" DisplayName="If AssociateChangesetsAndWorkItems"><If.Then><mtbwa:InvokeForReason DisplayName="Associate Changesets and Work Items for non-Shelveset Builds" Reason="Manual, IndividualCI, BatchedCI, Schedule, ScheduleForced, UserCreated"><mtbwa:AssociateChangesetsAndWorkItems DisplayName="Associate Changesets and Work Items" /></mtbwa:InvokeForReason></If.Then></If></Parallel><If Condition="[Not compilationException Is Nothing]" DisplayName="If a Compilation Exception Occurred"><If.Then><Throw DisplayName="Rethrow Compilation Exception" Exception="[compilationException]" /></If.Then></If><Parallel DisplayName="Get Impacted Tests, Index Sources and Publish Symbols"><If Condition="[PerformTestImpactAnalysis]" DisplayName="If PerformTestImpactAnalysis"><If.Then><Sequence DisplayName="Get Impacted Tests"><Sequence.Variables><Variable x:TypeArguments="scg:IEnumerable(x:String)" Name="assemblies" /></Sequence.Variables><mtbwa:FindMatchingFiles DisplayName="Find Build Outputs" MatchPattern="[String.Format(&quot;{0}\**\*.dll;{0}\**\*.exe&quot;, BinariesDirectory)]" Result="[assemblies]" /><mttbb:GetImpactedTests AssociatedChangesets="{x:Null}" BaselineBuildDropLocation="{x:Null}" CodeChanges="{x:Null}" ImpactedTests="{x:Null}" Assemblies="[assemblies]" BinariesRoot="[BinariesDirectory]" Build="[BuildDetail]" DisplayName="Get Impacted Tests" Workspace="[Workspace]" /></Sequence></If.Then></If><If Condition="[SourceAndSymbolServerSettings.IndexSources Or SourceAndSymbolServerSettings.HasSymbolStorePath]" DisplayName="If SourceAndSymbolServerSettings.IndexSources Or SourceAndSymbolServerSettings.HasSymbolStorePath"><If.Then><mtbwa:InvokeForReason DisplayName="Index Sources and Publish Symbols for Triggered Builds" Reason="Triggered"><mtbwa:InvokeForReason.Variables><Variable x:TypeArguments="scg:IEnumerable(x:String)" Name="symbolFiles" /></mtbwa:InvokeForReason.Variables><mtbwa:FindMatchingFiles DisplayName="Find Symbol Files" MatchPattern="[String.Format(&quot;{0}\**\*.pdb&quot;, BinariesDirectory)]" Result="[symbolFiles]" /> <If Condition="[SourceAndSymbolServerSettings.IndexSources]" DisplayName="If SourceAndSymbolServerSettings.IndexSources"><If.Then><TryCatch DisplayName="Try Index Sources"><TryCatch.Try><mtbwa:IndexSources DisplayName="Index Sources" FileList="[symbolFiles]" /></TryCatch.Try><TryCatch.Catches><Catch x:TypeArguments="s:Exception"><ActivityAction x:TypeArguments="s:Exception"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="s:Exception" Name="exception" /></ActivityAction.Argument><mtbwa:WriteBuildError Message="[exception.Message]" /></ActivityAction></Catch></TryCatch.Catches></TryCatch></If.Then></If> <If Condition="[SourceAndSymbolServerSettings.HasSymbolStorePath]" DisplayName="If SourceAndSymbolServerSettings.HasSymbolStorePath"><If.Then><TryCatch DisplayName="Try Publish Symbols"><TryCatch.Try><mtbwa:SharedResourceScope DisplayName="Synchronize Access to Symbol Store" MaxExecutionTime="[TimeSpan.Zero]" MaxWaitTime="[New TimeSpan(1, 0, 0)]" ResourceName="[SourceAndSymbolServerSettings.SymbolStorePath]"><mtbwa:PublishSymbols DisplayName="Publish Symbols" FileList="[symbolFiles]" ProductName="[BuildDetail.BuildDefinition.Name]" StorePath="[SourceAndSymbolServerSettings.SymbolStorePath]" Version="[BuildDetail.BuildNumber]" /></mtbwa:SharedResourceScope></TryCatch.Try><TryCatch.Catches><Catch x:TypeArguments="s:Exception"><ActivityAction x:TypeArguments="s:Exception"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="s:Exception" Name="exception" /></ActivityAction.Argument><mtbwa:WriteBuildError Message="[exception.Message]" /></ActivityAction></Catch></TryCatch.Catches></TryCatch></If.Then></If></mtbwa:InvokeForReason></If.Then></If></Parallel></Sequence></TryCatch.Try></TryCatch> <If Condition="[FileRefCheckinTargetFileName = &quot;&quot;]" DisplayName="If Checkin Target file is specified"><If.Else><mtbwa:MSBuild LogFile="MyBuild.Log" LogFileDropLocation="[BuildDetail.DropLocation + &quot;\log&quot;]" Project="[String.Format(&quot;{0}\{2}\Tesco\Com\Build\{1}&quot;, SourcesDirectory, FileRefCheckinTargetFileName, BranchToBuild)]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" Targets="[New String() {&quot;MyTarget&quot;}]" /></If.Else></If></mtbwa:AgentScope>
      <mtbwa:InvokeForReason DisplayName="Check In Gated Changes for CheckInShelveset Builds" Reason="CheckInShelveset">
        <mtbwa:CheckInGatedChanges DisplayName="Check In Gated Changes" />
      </mtbwa:InvokeForReason>
      <If Condition="[BuildDetail.TestStatus &lt;&gt; Microsoft.TeamFoundation.Build.Client.BuildPhaseStatus.Failed]" DisplayName="If the tests haven't failed">
        <If.Then>
          <Sequence DisplayName="Generate Partial Manifest Fragment">
            <Sequence.Variables>
              <Variable x:TypeArguments="x:String" Name="FileToWrite" />
              <Variable x:TypeArguments="sx:XmlDocument" Name="ManifestXmlDocument" />
            </Sequence.Variables>
            <mtbwa:FindMatchingFiles DisplayName="Find Matching Packages" MatchPattern="[System.IO.Path.Combine(BuildDetail.DropLocation,&#xA;ManifestFilterExpression).ToString()]" Result="[FilesForManifest]" />
            <mtbwa:WriteBuildMessage DisplayName="Info: Show result count" Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[String.Format(&quot;Searched for: {0} and had {1} result(s).&quot;,&#xA;              System.IO.Path.Combine(BuildDetail.DropLocation,&#xA;ManifestFilterExpression).ToString(),&#xA;                                 FilesForManifest.Count.ToString())]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" />
            <Assign DisplayName="Assign Generated Manifest Header">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">[FileToWrite]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String" xml:space="preserve">[String.Format("{0}",
              "&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;&lt;!-- Warning - this file was autogenerated by the TFS Build process - do not modify! --&gt;&lt;PartialManifest&gt;")]<xml:space>preserve</xml:space></InArgument>
              </Assign.Value>
            </Assign>
            <If Condition="[FilesForManifest.Count &gt; 0]" DisplayName="Check FilesForManifest returns more than 0 results">
              <If.Then>
                <Sequence DisplayName="Generate Manifest file">
                  <Sequence DisplayName="Generate File Content">
                    <ForEach x:TypeArguments="x:String" DisplayName="ForEach Package Found" Values="[FilesForManifest]">
                      <ActivityAction x:TypeArguments="x:String">
                        <ActivityAction.Argument>
                          <DelegateInArgument x:TypeArguments="x:String" Name="item" />
                        </ActivityAction.Argument>
                        <Assign DisplayName="Append Package to Manifest">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:String">[FileToWrite]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:String" xml:space="preserve">[String.Format("{0}&lt;Package ComponentName=""{2}"" Version=""{3}"" Path=""{1}"" BuildURI=""{4}"" /&gt;",
              FileToWrite,
              item.ToString(),
              ManifestPackageIdentifier,
              BuildDetail.BuildNumber.Substring(BuildDetail.BuildNumber.LastIndexOf("_") + 1),
              BuildDetail.Uri)]<xml:space>preserve</xml:space></InArgument>
                          </Assign.Value>
                        </Assign>
                      </ActivityAction>
                    </ForEach>
                  </Sequence>
                </Sequence>
              </If.Then>
              <If.Else>
                <If Condition="[FilesForManifest.Count = 0]" DisplayName="Handle error condition">
                  <If.Then>
                    <mtbwa:WriteBuildWarning Message="[String.Format(&quot;No files found matching specified pattern: {0}&quot;, ManifestFilterExpression)]" />
                  </If.Then>
                </If>
              </If.Else>
            </If>
            <Assign DisplayName="Assign Generated Manifest Footer">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">[FileToWrite]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String" xml:space="preserve">[String.Format("{0}{1}",
              FileToWrite,
              "&lt;/PartialManifest&gt;")]<xml:space>preserve</xml:space></InArgument>
              </Assign.Value>
            </Assign>
            <mtbwa:CreateDirectory Directory="[Path.Combine(GeneratedManifestOutputPath, RouteToLiveTag, ManifestPackageIdentifier).ToString()]" />
            <Sequence DisplayName="Create and Save Xml Doc">
              <Assign DisplayName="Create New XmlDocument">
                <Assign.To>
                  <OutArgument x:TypeArguments="sx:XmlDocument">[ManifestXmlDocument]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="sx:XmlDocument">[New XmlDocument()]</InArgument>
                </Assign.Value>
              </Assign>
              <InvokeMethod DisplayName="Load Xml into XmlDocument" MethodName="LoadXml">
                <InvokeMethod.TargetObject>
                  <InArgument x:TypeArguments="sx:XmlDocument">[ManifestXmlDocument]</InArgument>
                </InvokeMethod.TargetObject>
                <InArgument x:TypeArguments="x:String">[FileToWrite]</InArgument>
              </InvokeMethod>
              <InvokeMethod DisplayName="Save Manifest to Output location" MethodName="Save">
                <InvokeMethod.TargetObject>
                  <InArgument x:TypeArguments="sx:XmlDocument">[ManifestXmlDocument]</InArgument>
                </InvokeMethod.TargetObject>
                <InArgument x:TypeArguments="x:String">[String.Format("{0}\{4}\{3}\PartialManifest_{3}_{1}_{2}.xml", GeneratedManifestOutputPath, RouteToLiveTag, DateTime.UtcNow.ToString("yyyyMddThhmmss"), ManifestPackageIdentifier, RouteToLiveTag)]</InArgument>
              </InvokeMethod>
            </Sequence>
            <mtbwa:WriteBuildMessage DisplayName="Show Generated Manifest in Build Log" Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[String.Format(&quot;Generated manifest fragment: {0}&quot;, FileToWrite)]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" />
          </Sequence>
        </If.Then>
        <If.Else>
          <mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[String.Format(&quot;Partial Manifest generation bypassed.&quot;)]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" />
        </If.Else>
      </If>
    </Sequence>
  </this:Process.Implementation>
</this:Process>